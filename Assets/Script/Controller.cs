//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Script/Controller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controller : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controller()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controller"",
    ""maps"": [
        {
            ""name"": ""Menu"",
            ""id"": ""030040de-8e4d-4c0b-8d3d-e758f81b10e8"",
            ""actions"": [
                {
                    ""name"": ""DisableMenu"",
                    ""type"": ""Button"",
                    ""id"": ""59559419-67b2-4b7a-bfe0-f58a73e56789"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c8d47b71-96c1-40da-a305-03db5f765c1e"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DisableMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MainScene"",
            ""id"": ""746233da-cfea-42a4-b444-d8d910be5cf6"",
            ""actions"": [
                {
                    ""name"": ""EnableMenu"",
                    ""type"": ""Button"",
                    ""id"": ""f8bbfc9f-9cb0-47ad-94e3-2aeae4db462d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InsertNewNode"",
                    ""type"": ""Button"",
                    ""id"": ""af2bcb20-28ff-47eb-9771-60f3f45d0296"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""131ae4a9-604c-4fd2-a2f7-1690f36d22c2"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnableMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70e57a06-b32e-4d64-a435-f9ca40193eee"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InsertNewNode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_DisableMenu = m_Menu.FindAction("DisableMenu", throwIfNotFound: true);
        // MainScene
        m_MainScene = asset.FindActionMap("MainScene", throwIfNotFound: true);
        m_MainScene_EnableMenu = m_MainScene.FindAction("EnableMenu", throwIfNotFound: true);
        m_MainScene_InsertNewNode = m_MainScene.FindAction("InsertNewNode", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Menu
    private readonly InputActionMap m_Menu;
    private IMenuActions m_MenuActionsCallbackInterface;
    private readonly InputAction m_Menu_DisableMenu;
    public struct MenuActions
    {
        private @Controller m_Wrapper;
        public MenuActions(@Controller wrapper) { m_Wrapper = wrapper; }
        public InputAction @DisableMenu => m_Wrapper.m_Menu_DisableMenu;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void SetCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterface != null)
            {
                @DisableMenu.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnDisableMenu;
                @DisableMenu.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnDisableMenu;
                @DisableMenu.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnDisableMenu;
            }
            m_Wrapper.m_MenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @DisableMenu.started += instance.OnDisableMenu;
                @DisableMenu.performed += instance.OnDisableMenu;
                @DisableMenu.canceled += instance.OnDisableMenu;
            }
        }
    }
    public MenuActions @Menu => new MenuActions(this);

    // MainScene
    private readonly InputActionMap m_MainScene;
    private IMainSceneActions m_MainSceneActionsCallbackInterface;
    private readonly InputAction m_MainScene_EnableMenu;
    private readonly InputAction m_MainScene_InsertNewNode;
    public struct MainSceneActions
    {
        private @Controller m_Wrapper;
        public MainSceneActions(@Controller wrapper) { m_Wrapper = wrapper; }
        public InputAction @EnableMenu => m_Wrapper.m_MainScene_EnableMenu;
        public InputAction @InsertNewNode => m_Wrapper.m_MainScene_InsertNewNode;
        public InputActionMap Get() { return m_Wrapper.m_MainScene; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainSceneActions set) { return set.Get(); }
        public void SetCallbacks(IMainSceneActions instance)
        {
            if (m_Wrapper.m_MainSceneActionsCallbackInterface != null)
            {
                @EnableMenu.started -= m_Wrapper.m_MainSceneActionsCallbackInterface.OnEnableMenu;
                @EnableMenu.performed -= m_Wrapper.m_MainSceneActionsCallbackInterface.OnEnableMenu;
                @EnableMenu.canceled -= m_Wrapper.m_MainSceneActionsCallbackInterface.OnEnableMenu;
                @InsertNewNode.started -= m_Wrapper.m_MainSceneActionsCallbackInterface.OnInsertNewNode;
                @InsertNewNode.performed -= m_Wrapper.m_MainSceneActionsCallbackInterface.OnInsertNewNode;
                @InsertNewNode.canceled -= m_Wrapper.m_MainSceneActionsCallbackInterface.OnInsertNewNode;
            }
            m_Wrapper.m_MainSceneActionsCallbackInterface = instance;
            if (instance != null)
            {
                @EnableMenu.started += instance.OnEnableMenu;
                @EnableMenu.performed += instance.OnEnableMenu;
                @EnableMenu.canceled += instance.OnEnableMenu;
                @InsertNewNode.started += instance.OnInsertNewNode;
                @InsertNewNode.performed += instance.OnInsertNewNode;
                @InsertNewNode.canceled += instance.OnInsertNewNode;
            }
        }
    }
    public MainSceneActions @MainScene => new MainSceneActions(this);
    public interface IMenuActions
    {
        void OnDisableMenu(InputAction.CallbackContext context);
    }
    public interface IMainSceneActions
    {
        void OnEnableMenu(InputAction.CallbackContext context);
        void OnInsertNewNode(InputAction.CallbackContext context);
    }
}
